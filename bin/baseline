#!/usr/bin/env ruby

require 'open3'

script = File.expand_path(__FILE__)

opts = ARGV.dup
switches = opts.select { |x| x[0] == '-' }.join.split('')
switches.delete('-')

baseline = switches.delete('b')
verbose = switches.delete('v')
very_verbose = switches.delete('V')
continuous = switches.delete('c')
verbose ||= very_verbose
failed = updated = matched = skipped = 0

abort "Unrecognized switch: #{switches.first}" unless switches.empty?

scenarios = opts.reject { |x| x[0] == '-' }
if scenarios.empty?
  regress_dir = File.expand_path(File.join(script, '../..', 'regress/*.rb'))
  scenarios = Dir.glob(regress_dir)
end
scenarios.map! do |s|
  s = File.absolute_path(s)
  abort "Not an executable: #{s}" unless File.file?(s) and File.executable?(s)
  s
end

scenarios.sort.each do |s|
  b = "#{s}.baseline"
  name = File.basename(s)
  print (name + ':' + ' ' * 50)[0, 50]
  unless baseline or File.file?(b)
    puts '[ BASELINE MISSING ]'
    skipped += 1
    next
  end

  # Run the test and compare
  s_out, s_err, status = Open3.capture3("ruby #{s}")
  bt = (File.read(b) rescue '')
  matches = (bt.strip == s_out.strip)

  # Show the results
  if baseline
    if matches and File.file?(b)
      puts '[ UP TO DATE ]'
      matched += 1
    elsif s_out.downcase.include?('fatal')
      puts '[ ERROR ]'
      puts s_out
      puts '-- STDERR --'
      puts s_err
      failed += 1
    else
      File.write(b, s_out)
      puts '[ BASELINED ]'
      updated += 1
    end
  else
    if matches
      puts '[ PASSED ]'
      matched += 1
    else
      puts '[ MISMATCH ]'
      failed += 1
      if verbose
        File.write('/tmp/baseline.tmp', s_out)
        puts `diff #{b} /tmp/baseline.tmp`

        # And print stderr if we're being VERY verbose
        if !s_err.strip.empty? and very_verbose
          puts '-- STDERR --'
          puts s_err
        end
      end
    end
  end
end

exec(script, *ARGV) if continuous

if baseline
  puts "#{updated} Updated, #{matched} Up-to-date, #{failed} Failed"
else
  puts "#{matched} Passed, #{failed} Failed, #{skipped} Skipped"
end

exit(failed)
