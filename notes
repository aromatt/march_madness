# TODO
DONE - Need to do some weighting/normalization.
DONE - Need to ensure consistent row (team) indexing (small enough to just use a dictionary)
DONE - Get post-SVD team vectors
DONE - Build games lookup table:
  - 2*N dimensional space where N length of post-SVD team vectors.
  - For each game concatenate team A vector with team B and label the point with the score difference
    - Don't forget to create a sister point, swapping the teams and inverting the label

DONE - Evaluate by splitting data into lookup table and test data.
- qualify events with time bucket

# Dependencies
  ruby
  python
    numpy (use Debian python-numpy)
    scipy (use Debian python-scipy)
    scikit-learn (use Debian python-scikits-learn)
    sparsesvd (use pip)

  # NYI
  scikit-cuda (and CUDA)
    - make sure LD_LIBRARY_PATH includes cuda include dirs, and that PATH includes cuda bin dirs
    - if pycuda fails to install complaining about not being able to find cuda.h, it might actually
      be that the cuda bin dir is not in your PATH.


# Instructions

  # Install pip
  # Install python deps (use virtualenv to keep it isolated)

  $ cd march_madness

  # Collect data:
  # run ./bin scripts 0_*, 1_* and 2_* (2 can take hours because of sleeping in between HTTP queries)

  # Extract event tuples. You can run it in a single process with, capturing stdout (and stderr for
  # a report)... or...
  $ ./bin/extract_event_tuples.rb data/playbyplay*.tsv > 1>stat/tuples.json 2>stat/report.txt

  # Or divide and conquer, splitting up the work among $PROCS processes. This will create a directory
  # named $NAME within stat/, where it will store the final merged output to tuples.json, and the final
  # report to report.txt
  $ PROCS=32 NAME=foo ./bin/cluster_extract_event_tuples.rb data/playbyplay*.tsv

  # Perform SVD on event tuples matrix
  ./bin/svd.py stat/maybe_some_dir/tuples.json


# Observations
Tuples:
  with double, triple, and quad event tuples --> 31K tuple types
Memory:
  There is a trade-off between column hash space and singular value count (SVD truncation)
  Local box can only ever do up to 20 bit column hash space.
  At 20 bits, can keep up to about 300 SVs. (there's only one per team, anyway)

Higher Accuracy with:
  Binary weights, normalized with max_abs_scale
  Longer tuples? Not so sure after bug. Only in combo with short tuples...
    there seems to be a sweet spot around 1 + 2 + 3
  Fewer SVs.
  Uniform KNN weighting
  ~20 neighbors

# Quick links
http://espn.go.com/mens-college-basketball/playbyplay?gameId=400818864
